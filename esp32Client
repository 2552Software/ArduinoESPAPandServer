#include <FS.h>                   //this needs to be first, or it all crashes and burns...
#include <SPIFFS.h>
#include <WiFi.h>          //https://github.com/esp8266/Arduino
#include <WebServer.h>
#include <ArduinoJson.h>          //https://github.com/bblanchon/ArduinoJson

#define WIFI1 "SAM1" // look here first, its a different AP than ours something like a cell based wifi (passwords added soon)
#define WIFI2 "SAMIAM" // working access point
#define MAX_PWD_LEN 16
#define MQTT_SERVER "SAMMQTT"
#define MQTT_PORT "1883"
#define CONFIG_FILE "/config.json"

void safestr(char *s1, const char *s2, int len) {
  if (s1 && s2 && len > 0){
    strncpy(s1, s2, len);
    s1[len-1] = '\0';
    Serial.printf("s1 is %s\n", s1);
  }
}

char blynk_token[33] = "YOUR_BLYNK_TOKEN";//todo bugbug

class Conf {
public:
  Conf() {
      chipid = ESP.getEfuseMac();//The chip ID is essentially its MAC address(length: 6 bytes).
      wifi1[0] = '\0';
      wifi2[0] = '\0';
      password1[0] = '\0';
      password2[0] = '\0';
      other[0] = '\0';
  }
  char wifi1[16]; // check here first
  char wifi2[16];
  char password1[MAX_PWD_LEN];
  char password2[MAX_PWD_LEN];
  char other[16];
  uint64_t chipid;  // read at setup time
  
  void set();
  void get();
  void setDefault();
  void echo();
} conf;

void Conf::echo(){
  Serial.printf("ESP32 Chip ID = %04X",(uint16_t)(chipid>>32));//print High 2 bytes
  Serial.printf("%08X\n",(uint32_t)chipid);//print Low 4bytes.
  Serial.printf("wifi1: %s wifi2: %s password1: %s password2: %s other: %s\n", wifi1, wifi2, password1, password2, other);
}

void Conf::setDefault(){
  Serial.println("set defaults");
  safestr(wifi1, WIFI1, sizeof(wifi1));
  safestr(wifi2, WIFI2, sizeof(wifi2));
  safestr(password1, "", sizeof(password1));
  safestr(password2, "", sizeof(password2)); // future phases can sync pwds or such
  safestr(other, "", sizeof(other));
  echo();
}
void Conf::set(){
    DynamicJsonBuffer jsonBuffer;
    JsonObject& json = jsonBuffer.createObject();
    File configFile = SPIFFS.open(CONFIG_FILE, "w");
    if (!configFile) {
      Serial.println("failed to open config file for writing");
    }
    else {
      json["wifi1"] = wifi1;
      json["wifi2"] = wifi2;
      json["pwd1"] = password1;
      json["pwd2"] = password2;
      json["other"] = other;
      Serial.println("config.json contents");
      json.prettyPrintTo(Serial);
      json.printTo(configFile);
      configFile.close();
    }
}

// keep for reference
void Conf::get(){
  //read configuration from FS json
  if (SPIFFS.exists("/config.json")) {
    //file exists, reading and loading
    Serial.println("reading config file");
    File configFile = SPIFFS.open(CONFIG_FILE, "r");
    if (configFile) {
      Serial.println("opened config file");
      size_t size = configFile.size();
      // Allocate a buffer to store contents of the file.
      std::unique_ptr<char[]> buf(new char[size]);

      configFile.readBytes(buf.get(), size);
      DynamicJsonBuffer jsonBuffer(JSON_OBJECT_SIZE(1) + MAX_PWD_LEN);
      JsonObject& json = jsonBuffer.parseObject(buf.get());
      json.printTo(Serial);
      if (json.success()) {
        Serial.println("\nparsed json A OK");
        safestr(wifi1, json["wifi1"], sizeof(wifi1));
        safestr(wifi2, json["wifi2"], sizeof(wifi2));
        safestr(password1, json["password1"], sizeof(password1));
        safestr(password2, json["password2"], sizeof(password2));
        safestr(other, json["other"], sizeof(other));
      } 
      else {
        Serial.println("failed to load json config");
      }
    }
    else {
      Serial.println("internal error");
    }
  }
  else {
    Serial.println("no config file, set defaults");
    conf.setDefault();
  }
   echo();
}

uint8_t waitForResult(int connectTimeout) {
  if (connectTimeout == 0) {
    return WiFi.waitForConnectResult();
  } 
  else {
    Serial.print(F("Waiting for connection result with time out of "));
    Serial.println(connectTimeout);
    unsigned long start = millis();
    boolean keepConnecting = true;
    uint8_t status;
    while (keepConnecting) {
      status = WiFi.status();
      if (millis() > start + connectTimeout) {
        keepConnecting = false;
        Serial.println(F("Connection timed out"));
      }
      if (status == WL_CONNECTED || status == WL_CONNECT_FAILED) {
        keepConnecting = false;
      }
      delay(100);
    }
    return status;
  }
}

int connectWifi(const char* ssid, const char* pass, int connectTimeout) {
  
  Serial.printf("Connecting...: ssid %s\n", ssid);
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Already connected. Bailing out.");
    return WL_CONNECTED;
  }
  //check if we have ssid and pass and force those, if not, try with last saved values
  if (ssid != NULL) {
    if (pass != NULL){
      WiFi.begin(ssid, pass);
    }
    else {
      WiFi.begin(ssid);
    }
  } 
  else {
    if (WiFi.SSID()) {
      Serial.println("Using WiFi.SSID");
      WiFi.begin();
    } 
    else {
      Serial.println("No saved credentials and no parameters passed in");
    }
  }

  return waitForResult(connectTimeout);
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println();

  Serial.println("mounting FS...");
  
  
  if (SPIFFS.begin()) { // often used
    //clean FS, for testing
    //Serial.println("SPIFFS remove ...");
    //SPIFFS.remove(CONFIG_FILE);
    Serial.printf("mounted file system bytes: %X/%X\n", SPIFFS.usedBytes(), SPIFFS.totalBytes());
    conf.get();
  }
  else {
    Serial.print("no SPIFFS");
    conf.setDefault(); // something really wrong but keep trying
    conf.set();
  }
  
 
  WiFi.mode(WIFI_AP_STA); // any ESP can be an AP if main AP is not found.

  // todo allow two passwords? or a web site to set a new pwd then reboot?
  if (connectWifi(conf.wifi1, conf.password1, 500) != WL_CONNECTED){
    if (connectWifi(conf.wifi2, conf.password2, 5000)!= WL_CONNECTED){
      Serial.println("No connections made. Be the access point");
      WiFi.softAP(conf.wifi2, conf.password2);
      Serial.print("AP IP address: ");
      Serial.println(WiFi.softAPIP());
    }
    else {
      Serial.print("Connected IP address: ");
    }
  }
}


void loop() {
  // put your main code here, to run repeatedly:


}
